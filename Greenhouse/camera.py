#!/usr/bin/env python
# encoding: utf-8

# camera.py
# Copyright (C) 2018 The Groundhog Whisperer
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# This is a for-fun project created for the purpose of automating climate
# control and irrigation in a small greenhouse.  This script (camera.py)
# produces a high and low resolution .jpg image and a low resolution
# animated .gif image to the web servers root folder.  These images a
# referenced in the static greenhouse.html page generated by the
# greenhouse.py script. This script reads a lumonisity sensor (light
# dependent resistor) connected to an analog to digital converter and
# adjusts the camera shutter speed for high and low light conditions.

# Output files produced:
# greenhoushigh.jpg - Static 3280, 2464 jpeg
# greenhouslow.jpg - Static 320, 240 jpeg
# greenhouslow{0-9}.jpg - Static 320, 240 jpegs
# greenhouslow.gif - Animated 320, 240 gif

# Requirements:
# ImageMagick
# sudo apt-get install imagemagick -y
# Pimoroni Automation HAt
# curl https://get.pimoroni.com/automationhat | bash


import picamera
import math
import time
import automationhat
time.sleep(0.1)  # short pause after ads1015 class creation recommended
import serial
import statistics
import subprocess
import os

##################################################################
###################### Customizable Values #######################
##################################################################

# Path and file name of the low resolution .jpg output camera image
cameraImageOutputFilenameLow = '/var/www/html/greenhouselow.jpg'
# Path and file name of the high resolution .jpg output camera image
cameraImageOutputFilenameHigh = '/var/www/html/greenhousehigh.jpg'

# Path and file name of the multiple low resolution .jpg files used to
# create the animated .gif image
cameraImageOutputFilenameJpgsToAnimatedGif = '/var/www/html/greenhouselowanim{0:04d}.jpg'

# ImageMagic command to create the animated gif using the multiple
# low resolution greenhouslow{0-9}.jpg files
operatingSystemImageMagickCommandAnimateJpgsIntoGif = 'convert -delay 10 -loop 0 /var/www/html/greenhouselowanim*.jpg /var/www/html/greenhouselow.gif'

# set the minimum luminosity sensors value at 0.01VDC
minimumLuminositySensorValue = 0.01

minimumLuminositySensorValueHighLightLevel = 1.4

cameraShutterSpeedHighLightLevel = 10000
cameraShutterSpeedLowLightLevel = 1000

cameraImageHighResolutionWidth = 3280
cameraImageHighResolutionHeight = 2464

cameraImageLowResolutionWidth = 320
cameraImageLowResolutionHeight = 240

##################################################################
#################### End Customizable Values #####################
##################################################################


##################################################################
################## Begin Subroutine Defintions ###################
##################################################################

# analog to digital converter #2 read light dependent resistor value subroutine
def readLuminositySensorValue():

    # the ADC may produce an erroneous luminisoty reading less than 0.00VDC
    # a for loop retrys the read process until a value > 0.00VDC is returned
    for i in range(0, 25):
        try:

            # initilized the counter variable
            readCounter = 0
            temporaryValue = float()
            temporaryValuesList = list()
            currentLuminositySensorValue = float()
            standardDeviationOfSensorValues = 0

            # loop through multiple data reads
            while readCounter < 2:
                # read the light value from analog to digital converter #2
                temporaryValue = automationhat.analog[1].read()
                # keep one of the values in case the read is
                # consistent
                goodTemporaryValue = temporaryValue
                time.sleep(.9)

                # populate a list of values
                temporaryValuesList.append(temporaryValue)
                readCounter = readCounter + 1

            # If the standard deviation of the series of
            # readings is zero then the sensor produced
            # multiple consistent values and we should
            # consider the data reliable and take actions
            # return the standard deviation of the list of values
            standardDeviationOfSensorValues = math.sqrt(
                statistics.pvariance(temporaryValuesList))

            # if there is no difference in the values
            # use the goodTemporaryValue they are all
            # the same
            if (standardDeviationOfSensorValues == 0):
                currentLuminositySensorValue = goodTemporaryValue
            elif (standardDeviationOfSensorValues != 0):
                # if there is a difference set the value
                # to zero and try again for a consistent
                # data read
                currentLuminositySensorValue = 0

            if (currentLuminositySensorValue < 0.05):
                print('ADC error read LDR value less than 0.01VDC = %.3f Attempting reread' %
                      currentLuminositySensorValue)

            if (currentLuminositySensorValue > minimumLuminositySensorValue):
                return(currentLuminositySensorValue)
                break

        except RuntimeError as e:
            # print an error if the sensor read fails
            print("ADC sensor read failed: ", e.args)


# camera capture images subroutine
def cameraCaptureImages():

    # Set the shutter speed relative the current light levels
    if (currentLuminositySensorValue >= minimumLuminositySensorValueHighLightLevel):
        cameraShutterSpeed = cameraShutterSpeedHighLightLevel
    elif (currentLuminositySensorValue < minimumLuminositySensorValueHighLightLevel):
        cameraShutterSpeed = cameraShutterSpeedLowLightLevel

    camera = picamera.PiCamera()
    camera.resolution = (
        cameraImageHighResolutionWidth,
        cameraImageHighResolutionHeight)
    camera.shutter_speed = cameraShutterSpeed
    camera.iso = 400
    camera.start_preview()
    time.sleep(3)
    camera.exposure_mode = 'off'
    camera.capture(cameraImageOutputFilenameHigh)
    camera.stop_preview()
    camera.capture(
        cameraImageOutputFilenameLow,
        resize=(
            cameraImageLowResolutionWidth,
            cameraImageLowResolutionHeight))
    camera.stop_preview()
    print('Static .jpg images created.')

    for i in range(15):
        camera.capture(
            cameraImageOutputFilenameJpgsToAnimatedGif.format(i),
            resize=(cameraImageLowResolutionWidth,
                    cameraImageLowResolutionHeight))
        time.sleep(2)
    os.system(operatingSystemImageMagickCommandAnimateJpgsIntoGif)
    print('Animated .gif image created.')

##################################################################
################### End Subroutine Defintions ####################
##################################################################


##################################################################
########### Perform Luminosity Level Evaluation Process ##########
##################################################################
# call the read luminosity sensor value subroutine
currentLuminositySensorValue = readLuminositySensorValue()

##################################################################
################# Perform Image Creation Process #################
##################################################################
# call the camera capture images subroutine
cameraCaptureImages()


