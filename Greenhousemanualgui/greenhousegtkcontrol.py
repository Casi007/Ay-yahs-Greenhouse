#!/usr/bin/env python
# encoding: utf-8

# greenhousegtkcontrol.py
# Copyright (C) 2018 The Groundhog Whisperer
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# This is a for-fun project created for the purpose of automating climate
# control and irrigation in a small greenhouse.  This script (camera.py)
# produces a high and low resolution .jpg image and a low resolution
# animated .gif image to the web servers root folder.  These images a
# referenced in the static greenhouse.html page generated by the
# greenhouse.py script. This script reads a lumonisity sensor (light
# dependent resistor) connected to an analog to digital converter and
# adjusts the camera shutter speed for high and low light conditions.

import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk
import urllib2


# Button selection input number to remote control function list
# 0/1 Turn on/off the greenhouse fan
# 2/3 Turn on/off the greenhouse light
# 4/5 Turn on/off output three
# 6/7 Open/close the water solenoid valve
# 8/9 Open/close the window
REMOTE_CONTROL_URLS = ['http://192.168.1.118/openoutputonemanual.php',
			'http://192.168.1.118/closeoutputonemanual.php',
			'http://192.168.1.118/openoutputtwomanual.php',
			'http://192.168.1.118/closeoutputtwomanual.php',
			'http://192.168.1.118/openoutputthreemanual.php',
			'http://192.168.1.118/closeoutputthreemanual.php',
			'http://192.168.1.118/openwatermanual.php',
			'http://192.168.1.118/closewatermanual.php',
			'http://192.168.1.118/openwindowmanual.php',
			'http://192.168.1.118/closewindowmanual.php']

# Timeout in seconds before urllib2 fails to fetch the remote URL
URL_FETCH_TIMEOUT_SECONDS = 10


class MyWindow(Gtk.Window):

    def __init__(self):

        Gtk.Window.__init__(self, title="Ay-Yah's Greenhouse Manual Operations")

	
        self.set_size_request(400, 300)

        self.box = Gtk.VBox(spacing=0)
        self.add(self.box)

	img = Gtk.Image() 
	img.set_from_file("headerimage.jpg") 
	img.show()
	self.box.pack_start(img, True, True, 10)
	
	label = Gtk.Label("Please select a manual operation to perform")
        self.box.pack_start(label, True, True, 10)
        
        self.button0 = Gtk.Button(label="Fan On (Output One On)")
        self.button0.connect("clicked", self.on_button0_clicked)
        self.box.pack_start(self.button0, True, True, 1)

        self.button1 = Gtk.Button(label="Fan Off (Output One Off)")
        self.button1.connect("clicked", self.on_button1_clicked)
        self.box.pack_start(self.button1, True, True, 1)

        self.button2 = Gtk.Button(label="Light On (Output Two On)")
        self.button2.connect("clicked", self.on_button2_clicked)
        self.box.pack_start(self.button2, True, True, 1)

        self.button3 = Gtk.Button(label="Light Off (Output Two Off)")
        self.button3.connect("clicked", self.on_button3_clicked)
        self.box.pack_start(self.button3, True, True, 1)

        self.button4 = Gtk.Button(label="Unused (Output Three On)")
        self.button4.connect("clicked", self.on_button4_clicked)
        self.box.pack_start(self.button4, True, True, 1)

        self.button5 = Gtk.Button(label="Unused (Output Three Off)")
        self.button5.connect("clicked", self.on_button5_clicked)
        self.box.pack_start(self.button5, True, True, 1)

        self.button6 = Gtk.Button(label="Open Solenoid Valve")
        self.button6.connect("clicked", self.on_button6_clicked)
        self.box.pack_start(self.button6, True, True, 1)

        self.button7 = Gtk.Button(label="Close Solenoid Valve")
        self.button7.connect("clicked", self.on_button7_clicked)
        self.box.pack_start(self.button7, True, True, 1)

        self.button8 = Gtk.Button(label="Open Window (Extend Actuator)")
        self.button8.connect("clicked", self.on_button8_clicked)
        self.box.pack_start(self.button8, True, True, 1)

        self.button9 = Gtk.Button(label="Close Window (Retract Actuator)")
        self.button9.connect("clicked", self.on_button9_clicked)
        self.box.pack_start(self.button9, True, True, 1)

	# a linkbutton pointing to the given URI
        button_url0 = Gtk.LinkButton(uri="http://192.168.1.118")
        # with given text
        button_url0.set_label("Greenhouse Homepage http://192.168.1.118")

        # add the button to the window
	self.box.pack_start(button_url0, True, True, 0)

	# a linkbutton pointing to the given URI
        button_url1 = Gtk.LinkButton(uri="http://192.168.1.118/greenhousehigh.jpg")
        # with given text
        button_url1.set_label("High resolution camera image")

        # add the button to the window
	self.box.pack_start(button_url1, True, True, 0)

	# a linkbutton pointing to the given URI
        button_url2 = Gtk.LinkButton(uri="http://192.168.1.118/greenhouselow.gif")
        # with given text
        button_url2.set_label("Animated .GIF camera image")

        # add the button to the window
	self.box.pack_start(button_url2, True, True, 0)


    def on_button0_clicked(self, widget):
        print("Turning Fan On")
	remote_command_number_option = 0
	fetch_url_trigger_event(remote_command_number_option)

    def on_button1_clicked(self, widget):
        print("Turning Fan Off")
	remote_command_number_option = 1
	fetch_url_trigger_event(remote_command_number_option)

    def on_button2_clicked(self, widget):
        print("Turning Light On")
	remote_command_number_option = 2
	fetch_url_trigger_event(remote_command_number_option)

    def on_button3_clicked(self, widget):
        print("Turning Light Off")
	remote_command_number_option = 3
	fetch_url_trigger_event(remote_command_number_option)

    def on_button4_clicked(self, widget):
        print("Turning Unused Output Three On")
	remote_command_number_option = 4
	fetch_url_trigger_event(remote_command_number_option)

    def on_button5_clicked(self, widget):
        print("Turning Unused Output Three Off")
	remote_command_number_option = 5
	fetch_url_trigger_event(remote_command_number_option)

    def on_button6_clicked(self, widget):
        print("Opening Solenoid Valve")
	remote_command_number_option = 6
	fetch_url_trigger_event(remote_command_number_option)

    def on_button7_clicked(self, widget):
        print("Closing Solenoid Valve")
	remote_command_number_option = 7
	fetch_url_trigger_event(remote_command_number_option)

    def on_button8_clicked(self, widget):
        print("Opening Window")
	remote_command_number_option = 8
	fetch_url_trigger_event(remote_command_number_option)

    def on_button9_clicked(self, widget):
        print("Closing Window")
	remote_command_number_option = 9
	fetch_url_trigger_event(remote_command_number_option)








def fetch_url_trigger_event(remote_command_number_option):

	print "Fetching URL: ", REMOTE_CONTROL_URLS[remote_command_number_option]

	remote_control_command_request_url = urllib2.Request(REMOTE_CONTROL_URLS[remote_command_number_option])

	try: 
		response_control_command = urllib2.urlopen(remote_control_command_request_url, timeout = URL_FETCH_TIMEOUT_SECONDS)
		object_containing_the_output_response_page = response_control_command.read()
		print "Operation successful!"
		print "URL fetch results: ", object_containing_the_output_response_page

	except urllib2.URLError as e:
		print "***Operation Failed*** An error occurred: "
		print e.reason   




win = MyWindow()
win.connect("destroy", Gtk.main_quit)
win.show_all()
Gtk.main()
