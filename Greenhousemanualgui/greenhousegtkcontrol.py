#!/usr/bin/env python
# encoding: utf-8

# greenhousegtkcontrol.py
# Copyright (C) 2018 The Groundhog Whisperer
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# This is a for-fun project created for the purpose of automating climate
# control and irrigation in a small greenhouse.  This script (camera.py)
# produces a high and low resolution .jpg image and a low resolution
# animated .gif image to the web servers root folder.  These images a
# referenced in the static greenhouse.html page generated by the
# greenhouse.py script. This script reads a lumonisity sensor (light
# dependent resistor) connected to an analog to digital converter and
# adjusts the camera shutter speed for high and low light conditions.

import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk
import urllib2
import time


IP_GREENHOUSE_PI = '192.168.1.118'

# Timeout in seconds before urllib2 fails to fetch the remote URL
# This value should be slightly longer than the most lengthy operation
# runtime. (e.g. Extending the linear actuator takes 60+ seconds)
URL_FETCH_TIMEOUT_SECONDS = 3

# Button selection input number to remote control function list
# 0/1 Turn on/off the greenhouse fan
# 2/3 Turn on/off the greenhouse light
# 4/5 Turn on/off output three
# 6/7 Open/close the water solenoid valve
# 8/9 Open/close the window
REMOTE_CONTROL_URLS = ["http://{}/openoutputonemanual.php".format(IP_GREENHOUSE_PI),
			"http://{}/closeoutputonemanual.php".format(IP_GREENHOUSE_PI),
			"http://{}/openoutputtwomanual.php".format(IP_GREENHOUSE_PI),
			"http://{}/closeoutputtwomanual.php".format(IP_GREENHOUSE_PI),
			"http://{}/openoutputthreemanual.php".format(IP_GREENHOUSE_PI),
			"http://{}/closeoutputthreemanual.php".format(IP_GREENHOUSE_PI),
			"http://{}/openwatermanual.php".format(IP_GREENHOUSE_PI),
			"http://{}/closewatermanual.php".format(IP_GREENHOUSE_PI),
			"http://{}/openwindowmanual.php".format(IP_GREENHOUSE_PI),
			"http://{}/closewindowmanual.php".format(IP_GREENHOUSE_PI)]


class MyWindow(Gtk.Window):

    def __init__(self):

	print "Downloading the low resolution animated .GIF image file."

	try:
		filedata = urllib2.urlopen("http://{}/greenhouselow.gif".format(IP_GREENHOUSE_PI))  
		datatowrite = filedata.read()
		with open('greenhouselow.gif', 'wb') as f:  
			f.write(datatowrite)

	except urllib2.URLError as e:
		print "Failed to download the low resolution animated .GIF image. An error occurred: "
		print e.reason   

	print "Downloading the environmental data record index.csv file."

	try:
		filedata = urllib2.urlopen("http://{}/index.csv".format(IP_GREENHOUSE_PI))  
		datatowrite = filedata.read()
		with open('index.csv', 'wb') as f:  
			f.write(datatowrite)

	except urllib2.URLError as e:
		print "Failed to download the environmental data record index.csv file.  An error occurred: "
		print e.reason   

	# try to read the local file do not die if the file does not exist
	try:
		with open('index.csv', "r") as f:
			for line in f: pass
			# read the last line of the CSV file containing the most recently recorded environmental values
			last_line_csv_file = line

	except IOError:
		print "Failed to download the index.csv file. An error occurred: "
		print 'error'

	if not last_line_csv_file or len(last_line_csv_file) < 1:
	# if the file read failed to read go back to sleep and try again
		exit()

	# remove new line char
	last_line_csv_file = last_line_csv_file.replace('\n', '')

	# remove single quotes
	last_line_csv_file = last_line_csv_file.replace("'", "")

	# remove double quotes
	last_line_csv_file = last_line_csv_file.replace('"', '')

	# split at commas
	csv_values = last_line_csv_file.split(",")

	current_luminosity_sensor_value = csv_values[0]
	current_temperature = csv_values[1]
	current_humidity = csv_values[2]
	current_soil_moisture_sensor_value = csv_values[3]
	current_solenoid_valve_status = csv_values[4]
	current_actuator_extension_status = csv_values[5]
	current_output_one_status = csv_values[6]
	current_output_two_status = csv_values[7]
	current_output_three_status = csv_values[8]
	seconds_since_the_epoch = csv_values[9]

	print "Ready to perform manual operations."

        Gtk.Window.__init__(self, title="Ay-yah's Greenhouse Manual Operations")

        self.set_size_request(400, 300)
        self.box = Gtk.VBox(spacing=0)
        self.add(self.box)

	img = Gtk.Image() 
#	img.set_from_file("headerimage.jpg") 
	img.set_from_file("greenhouselow.gif") 
	img.show()
	self.box.pack_start(img, True, True, 10)

	label_current_luminosity_sensor_value = Gtk.Label()
        label_current_luminosity_sensor_value.set_text('Luminosity: ' + current_luminosity_sensor_value + 'V')
        label_current_luminosity_sensor_value.set_justify(Gtk.Justification.LEFT)
        self.box.pack_start(label_current_luminosity_sensor_value, True, True, 0)

	label_current_temperature = Gtk.Label()
        label_current_temperature.set_text('Temperature: ' + current_temperature + 'F')
        label_current_temperature.set_justify(Gtk.Justification.LEFT)
        self.box.pack_start(label_current_temperature, True, True, 0)

	label_current_humidity = Gtk.Label()
        label_current_humidity.set_text('Humidity: ' + current_humidity + '%')
        label_current_humidity.set_justify(Gtk.Justification.LEFT)
        self.box.pack_start(label_current_humidity, True, True, 0)

	label_current_soil_moisture_sensor_value = Gtk.Label()
        label_current_soil_moisture_sensor_value.set_text('Soil Moisture: ' + current_soil_moisture_sensor_value + 'V')
        label_current_soil_moisture_sensor_value.set_justify(Gtk.Justification.LEFT)
        self.box.pack_start(label_current_soil_moisture_sensor_value, True, True, 0)

	label_current_solenoid_valve_status = Gtk.Label()
        label_current_solenoid_valve_status.set_text('Solenoid Valve: ' + current_solenoid_valve_status)
        label_current_solenoid_valve_status.set_justify(Gtk.Justification.LEFT)
        self.box.pack_start(label_current_solenoid_valve_status, True, True, 0)

	label_current_actuator_extension_status = Gtk.Label()
        label_current_actuator_extension_status.set_text('Actuator: ' + current_actuator_extension_status)
        label_current_actuator_extension_status.set_justify(Gtk.Justification.LEFT)
        self.box.pack_start(label_current_actuator_extension_status, True, True, 0)

	label_current_output_one_status = Gtk.Label()
        label_current_output_one_status.set_text('Output One: ' + current_output_one_status)
        label_current_output_one_status.set_justify(Gtk.Justification.LEFT)
        self.box.pack_start(label_current_output_one_status, True, True, 0)

	label_current_output_two_status = Gtk.Label()
        label_current_output_two_status.set_text('Output Two: ' + current_output_two_status)
        label_current_output_two_status.set_justify(Gtk.Justification.LEFT)
        self.box.pack_start(label_current_output_two_status, True, True, 0)

	label_current_output_three_status = Gtk.Label()
        label_current_output_three_status.set_text('Output Three: ' + current_output_three_status)
        label_current_output_three_status.set_justify(Gtk.Justification.LEFT)
        self.box.pack_start(label_current_output_three_status, True, True, 0)

#	label_current_seconds_since_the_epoch = Gtk.Label()
#        label_current_seconds_since_the_epoch.set_text('Epoch Timestamp:\n' + seconds_since_the_epoch)
#        label_current_seconds_since_the_epoch.set_justify(Gtk.Justification.LEFT)
#        self.box.pack_start(label_current_seconds_since_the_epoch, True, True, 0)

	converted_time = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(float(seconds_since_the_epoch)))

	label_current_time_readable = Gtk.Label()
        label_current_time_readable.set_text('Timestamp: ' + converted_time)
        label_current_time_readable.set_justify(Gtk.Justification.LEFT)
        self.box.pack_start(label_current_time_readable, True, True, 0)
	
	label = Gtk.Label("Please select a manual operation to perform")
        self.box.pack_start(label, True, True, 10)
        
        self.button0 = Gtk.Button(label="Fan On (Output One On)")
        self.button0.connect("clicked", self.on_button0_clicked)
        self.box.pack_start(self.button0, True, True, 1)

        self.button1 = Gtk.Button(label="Fan Off (Output One Off)")
        self.button1.connect("clicked", self.on_button1_clicked)
        self.box.pack_start(self.button1, True, True, 1)

        self.button2 = Gtk.Button(label="Light On (Output Two On)")
        self.button2.connect("clicked", self.on_button2_clicked)
        self.box.pack_start(self.button2, True, True, 1)

        self.button3 = Gtk.Button(label="Light Off (Output Two Off)")
        self.button3.connect("clicked", self.on_button3_clicked)
        self.box.pack_start(self.button3, True, True, 1)

        self.button4 = Gtk.Button(label="Unused (Output Three On)")
        self.button4.connect("clicked", self.on_button4_clicked)
        self.box.pack_start(self.button4, True, True, 1)

        self.button5 = Gtk.Button(label="Unused (Output Three Off)")
        self.button5.connect("clicked", self.on_button5_clicked)
        self.box.pack_start(self.button5, True, True, 1)

        self.button6 = Gtk.Button(label="Open Solenoid Valve")
        self.button6.connect("clicked", self.on_button6_clicked)
        self.box.pack_start(self.button6, True, True, 1)

        self.button7 = Gtk.Button(label="Close Solenoid Valve")
        self.button7.connect("clicked", self.on_button7_clicked)
        self.box.pack_start(self.button7, True, True, 1)

        self.button8 = Gtk.Button(label="Open Window (Extend Actuator)")
        self.button8.connect("clicked", self.on_button8_clicked)
        self.box.pack_start(self.button8, True, True, 1)

        self.button9 = Gtk.Button(label="Close Window (Retract Actuator)")
        self.button9.connect("clicked", self.on_button9_clicked)
        self.box.pack_start(self.button9, True, True, 1)

	# a linkbutton pointing to the given URI
        button_url0 = Gtk.LinkButton(uri="http://{}".format(IP_GREENHOUSE_PI))
        # with given text
#        button_url0.set_label("Greenhouse Homepage http://{}".format(IP_GREENHOUSE_PI))
        button_url0.set_label("GreenhousePi Homepage")

        # add the button to the window
	self.box.pack_start(button_url0, True, True, 0)

	# a linkbutton pointing to the given URI
        button_url1 = Gtk.LinkButton(uri="http://{}/greenhousehigh.jpg".format(IP_GREENHOUSE_PI))
        # with given text
        button_url1.set_label("High resolution camera image")

        # add the button to the window
	self.box.pack_start(button_url1, True, True, 0)

	# a linkbutton pointing to the given URI
        button_url3 = Gtk.LinkButton(uri="http://{}/index.csv".format(IP_GREENHOUSE_PI))
        # with given text
        button_url3.set_label("Download greenhouse data .CSV")

        # add the button to the window
	self.box.pack_start(button_url3, True, True, 0)

	# a linkbutton pointing to the given URI
        button_url4 = Gtk.LinkButton(uri="https://git.io/fhhsY")
        # with given text
        button_url4.set_label("Ay-yah's Greenhouse GitHub Repository")

        # add the button to the window
	self.box.pack_start(button_url4, True, True, 0)

    def on_button0_clicked(self, widget):
        print("Turning Fan On")
	remote_command_number_option = 0
	fetch_url_trigger_event(remote_command_number_option)

    def on_button1_clicked(self, widget):
        print("Turning Fan Off")
	remote_command_number_option = 1
	fetch_url_trigger_event(remote_command_number_option)

    def on_button2_clicked(self, widget):
        print("Turning Light On")
	remote_command_number_option = 2
	fetch_url_trigger_event(remote_command_number_option)

    def on_button3_clicked(self, widget):
        print("Turning Light Off")
	remote_command_number_option = 3
	fetch_url_trigger_event(remote_command_number_option)

    def on_button4_clicked(self, widget):
        print("Turning Unused Output Three On")
	remote_command_number_option = 4
	fetch_url_trigger_event(remote_command_number_option)

    def on_button5_clicked(self, widget):
        print("Turning Unused Output Three Off")
	remote_command_number_option = 5
	fetch_url_trigger_event(remote_command_number_option)

    def on_button6_clicked(self, widget):
        print("Opening Solenoid Valve")
	remote_command_number_option = 6
	fetch_url_trigger_event(remote_command_number_option)

    def on_button7_clicked(self, widget):
        print("Closing Solenoid Valve")
	remote_command_number_option = 7
	fetch_url_trigger_event(remote_command_number_option)

    def on_button8_clicked(self, widget):
        print("Opening Window")
	remote_command_number_option = 8
	fetch_url_trigger_event(remote_command_number_option)

    def on_button9_clicked(self, widget):
        print("Closing Window")
	remote_command_number_option = 9
	fetch_url_trigger_event(remote_command_number_option)



def fetch_url_trigger_event(remote_command_number_option):

	print "Fetching URL: ", REMOTE_CONTROL_URLS[remote_command_number_option]

	remote_control_command_request_url = urllib2.Request(REMOTE_CONTROL_URLS[remote_command_number_option])

	try: 
		response_control_command = urllib2.urlopen(remote_control_command_request_url, timeout = URL_FETCH_TIMEOUT_SECONDS)
		object_containing_the_output_response_page = response_control_command.read()
		print "Operation successful!"
		print "URL fetch results: ", object_containing_the_output_response_page

	except urllib2.URLError as e:
		print "***Operation Failed*** An error occurred: "
		print e.reason   



win = MyWindow()
win.connect("destroy", Gtk.main_quit)
win.show_all()
Gtk.main()
